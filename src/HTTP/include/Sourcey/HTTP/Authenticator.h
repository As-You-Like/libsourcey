// Copyright (c) 2005-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef SOURCEY_HTTP_Credentials_H
#define SOURCEY_HTTP_Credentials_H


#include "Sourcey/HTTP/URL.h"
////#include "Poco/Net/Net.h"
////#include "Poco/Net/NVHash.h"
//#include <ostream>
//#include <istream>
//#include <vector>
#include <string>


namespace scy {
namespace http {

	
class Request;
class Response;


class Authenticator //Net_API
	/// This is a utility class for working with HTTP
	/// authentication (basic or digest) in http::Request objects.
	///
	/// Usage is as follows:
	/// First, create a Authenticator object containing
	/// the username and password.
	///     Poco::Net::Authenticator creds("user", "s3cr3t");
	/// 
	/// Second, send the HTTP request with Poco::Net::HTTPClientSession.
	///     Poco::Net::HTTPClientSession session("pocoproject.org");
	///     Poco::Net::http::Request request(http::Request::HTTP_GET, "/index.html", http::Message::HTTP_1_1);
	///     session.sendRequest(request);
	///     Poco::Net::http::Response;
	///     std::istream& istr = session.receiveResponse(response);
	///
	/// If the server responds with a 401 status, authenticate the 
	/// request and resend it:
	///     if (response.getStatus() == Poco::Net::http::Response::HTTP_UNAUTHORIZED)
	///     {
	///         creds.authenticate(request, response);
	///         session.sendRequest(request);
	///         ...
	///     }
	///
	/// To perform multiple authenticated requests, call updateAuthInfo()
	/// instead of authenticate() on subsequent requests.	
	///     creds.updateAuthInfo(request);
	///     session.sendRequest(request);
	///     ...
	///
	/// Note: Do not forget to read the entire response stream from the 401 response
	/// before sending the authenticated request, otherwise there may be
	/// problems if a persistent connection is used.
{
public:
	Authenticator();
		// Creates an empty Authenticator object.

	Authenticator(const std::string& username, const std::string& password);
		// Creates an Authenticator object with the given username and password.

	~Authenticator();
		// Destroys the Authenticator.

	void fromUserInfo(const std::string& userInfo);
		// Parses username:password string and sets username and password of
		// the credentials object.
		// Throws SyntaxException on invalid user information.

	void fromURI(const http::URL& uri);
		// Extracts username and password from the given URI and sets username
		// and password of the credentials object.
		// Does nothing if URI has no user info part.

	/*
	void setUsername(const std::string& username);
		// Sets the username.

	const std::string& getUsername() const;
		// Returns the username.

	void setPassword(const std::string& password);
		// Sets the password.

	const std::string& getPassword() const;
		// Returns the password.
		*/

	void authenticate(http::Request& request, const http::Response& response);
		// Inspects WWW-Authenticate header of the response, initializes
		// the internal state (in case of digest authentication) and
		// adds required information to the given http::Request.
		//
		// Does nothing if there is no WWW-Authenticate header in the
		// http::Response.

	void updateAuthInfo(http::Request& request);
		// Updates internal state (in case of digest authentication) and
		// replaces authentication information in the request accordingly.

	void proxyAuthenticate(http::Request& request, const http::Response& response);
		// Inspects Proxy-Authenticate header of the response, initializes
		// the internal state (in case of digest authentication) and
		// adds required information to the given http::Request.
		//
		// Does nothing if there is no Proxy-Authenticate header in the
		// http::Response.

	void updateProxyAuthInfo(http::Request& request);
		// Updates internal state (in case of digest authentication) and
		// replaces proxy authentication information in the request accordingly.

	static bool isBasicCredentials(const std::string& header);
		// Returns true if authentication header is for Basic authentication.

	static bool isDigestCredentials(const std::string& header);
		// Returns true if authentication header is for Digest authentication.

	static bool hasBasicCredentials(const http::Request& request);
		// Returns true if Authorization with Basic credentials header is present in the request.

	static bool hasDigestCredentials(const http::Request& request);
		// Returns true if Authorization with Digest credentials header is present in the request.

	static bool hasProxyBasicCredentials(const http::Request& request);
		// Returns true if Authorization with Basic credentials header is present in the request.

	static bool hasProxyDigestCredentials(const http::Request& request);
		// Returns true if Authorization with Digest credentials header is present in the request.

	static void extractCredentials(const std::string& userInfo, std::string& username, std::string& password);
		// Extracts username and password from user:password information string.

	static void extractCredentials(const http::URL& uri, std::string& username, std::string& password);
		// Extracts username and password from the given URI (e.g.: "http://user:pass@sample.com/secret").

private:
	Authenticator(const Authenticator&);
	Authenticator& operator = (const Authenticator&);

	//HTTPDigestCredentials _digest;
};

/*
//
// inlines
//
inline void Authenticator::setUsername(const std::string& username)
{
	_digest.setUsername(username);
}


inline const std::string& Authenticator::getUsername() const
{
	return _digest.getUsername();
}

	
inline void Authenticator::setPassword(const std::string& password)
{
	_digest.setPassword(password);
}


inline const std::string& Authenticator::getPassword() const
{
	return _digest.getPassword();
}
*/


class BasicAuthenticator //Net_API
	/// This is a utility class for working with
	/// HTTP Basic Authentication in http::Request
	/// objects.
{
public:
	BasicAuthenticator();
		// Creates an empty BasicAuthenticator object.
		
	BasicAuthenticator(const std::string& username, const std::string& password);
		// Creates a BasicAuthenticator object with the given username and password.

	explicit BasicAuthenticator(const http::Request& request);
		// Creates a BasicAuthenticator object with the authentication information
		// from the given request.
		//
		// Throws a NotAuthenticatedException if the request does
		// not contain basic authentication information.

	explicit BasicAuthenticator(const std::string& authInfo);
		// Creates a BasicAuthenticator object with the authentication information
		// in the given string. The authentication information can be extracted
		// from a http::Request object by calling http::Request::getCredentials().

	~BasicAuthenticator();
		// Destroys the BasicAuthenticator.

	void setUsername(const std::string& username);
		// Sets the username.
		
	const std::string& getUsername() const;
		// Returns the username.
		
	void setPassword(const std::string& password);
		// Sets the password.
		
	const std::string& getPassword() const;
		// Returns the password.
		
	void authenticate(http::Request& request) const;
		// Adds authentication information to the given http::Request.

	void proxyAuthenticate(http::Request& request) const;
		// Adds proxy authentication information to the given http::Request.

	static const std::string SCHEME;

protected:
	void parseAuthInfo(const std::string& authInfo);
		// Extracts username and password from Basic authentication info
		// by base64-decoding authInfo and splitting the resulting
		// string at the ':' delimiter.

private:
	BasicAuthenticator(const BasicAuthenticator&);
	BasicAuthenticator& operator = (const BasicAuthenticator&);
	
	std::string _username;
	std::string _password;
};


//
// inlines
//
inline const std::string& BasicAuthenticator::getUsername() const
{
	return _username;
}


inline const std::string& BasicAuthenticator::getPassword() const
{
	return _password;
}



/*
class HTTPDigestCredentials //Net_API
	/// This is a utility class for working with
	/// HTTP Digest Authentication in http::Request
	/// objects.
	///
	/// Note: currently, no qop or qop=auth is
	/// supported only.
{
public:
	HTTPDigestCredentials();
		// Creates an empty HTTPDigestCredentials object.

	HTTPDigestCredentials(const std::string& username, const std::string& password);
		// Creates a HTTPDigestCredentials object with the given username and password.

	~HTTPDigestCredentials();
		// Destroys the HTTPDigestCredentials.

	void setUsername(const std::string& username);
		// Sets the username.

	const std::string& getUsername() const;
		// Returns the username.

	void setPassword(const std::string& password);
		// Sets the password.

	const std::string& getPassword() const;
		// Returns the password.

	void authenticate(http::Request& request, const http::Response& response);
		// Parses WWW-Authenticate header of the http::Response, initializes
		// internal state, and adds authentication information to the given http::Request.

	void authenticate(http::Request& request, const HTTPAuthenticationParams& responseAuthParams);
		// Initializes internal state according to information from the
		// HTTPAuthenticationParams of the response, and adds authentication
		// information to the given http::Request.
		//
		// Throws ArgumentException if HTTPAuthenticationParams is
		// invalid or some required parameter is missing.
		// Throws NotImplementedException in case of unsupported digest
		// algorithm or quality of protection method.

	void updateAuthInfo(http::Request& request);
		// Updates internal state and adds authentication information to
		// the given http::Request.

	void proxyAuthenticate(http::Request& request, const http::Response& response);
		// Parses Proxy-Authenticate header of the http::Response, initializes
		// internal state, and adds proxy authentication information to the given http::Request.

	void proxyAuthenticate(http::Request& request, const HTTPAuthenticationParams& responseAuthParams);
		// Initializes internal state according to information from the
		// HTTPAuthenticationParams of the response, and adds proxy authentication
		// information to the given http::Request.
		//
		// Throws ArgumentException if HTTPAuthenticationParams is
		// invalid or some required parameter is missing.
		// Throws NotImplementedException in case of unsupported digest
		// algorithm or quality of protection method.

	void updateProxyAuthInfo(http::Request& request);
		// Updates internal state and adds proxy authentication information to
		// the given http::Request.

	bool verifyAuthInfo(const http::Request& request) const;
		// Verifies the digest authentication information in the given http::Request
		// by recomputing the response and comparing it with what's in the request.
		//
		// Note: This method creates a HTTPAuthenticationParams object from the request
		// and calls verifyAuthParams() with request and params.

	bool verifyAuthParams(const http::Request& request, const HTTPAuthenticationParams& params) const;
		// Verifies the digest authentication information in the given http::Request
		// and HTTPAuthenticationParams by recomputing the response and comparing 
		// it with what's in the request.

	static std::string createNonce();
		// Creates a random nonce string.

	static const std::string SCHEME;

private:
	HTTPDigestCredentials(const HTTPDigestCredentials&);
	HTTPDigestCredentials& operator = (const HTTPDigestCredentials&);

	void createAuthParams(const http::Request& request, const HTTPAuthenticationParams& responseAuthParams);
	void updateAuthParams(const http::Request& request);
	int updateNonceCounter(const std::string& nonce);
	
	static const std::string DEFAULT_ALGORITHM;
	static const std::string DEFAULT_QOP;
	static const std::string NONCE_PARAM;
	static const std::string REALM_PARAM;
	static const std::string QOP_PARAM;
	static const std::string ALGORITHM_PARAM;
	static const std::string USERNAME_PARAM;
	static const std::string OPAQUE_PARAM;
	static const std::string URI_PARAM;
	static const std::string RESPONSE_PARAM;
	static const std::string AUTH_PARAM;
	static const std::string CNONCE_PARAM;
	static const std::string NC_PARAM;

	typedef std::map<std::string, int> NonceCounterMap;

	std::string _username;
	std::string _password;
	HTTPAuthenticationParams _requestAuthParams;
	NonceCounterMap _nc;
	
	static int _nonceCounter;
	static Mutex _nonceMutex;
};


//
// inlines
//
inline const std::string& HTTPDigestCredentials::getUsername() const
{
	return _username;
}


inline const std::string& HTTPDigestCredentials::getPassword() const
{
	return _password;
}
*/


} } // namespace scy::http


#endif // SOURCEY_HTTP_Credentials_H