# ===================================================================================
#  The LibSourcey CMake configuration file
#
#             ** File generated automatically, do not modify **
#
#  Usage from an external project:
#    In your CMakeLists.txt, add these lines:
#
#    FIND_PACKAGE(LibSourcey REQUIRED )
#    TARGET_LINK_LIBRARIES(MY_TARGET_NAME ${LibSourcey_LIBS})
#
#    This file will define the following variables:
#      - LibSourcey_LIBS                 : The list of libraries to links against.
#      - LibSourcey_LIB_DIR              : The directory where lib files are. Calling LINK_DIRECTORIES
#                                          with this path is NOT needed.
#      - LibSourcey_INCLUDE_DIRS         : The LibSourcey include directories.
#      - LibSourcey_COMPUTE_CAPABILITIES : The version of compute capability
#      - LibSourcey_VERSION              : The version of this LibSourcey build. Example: "1.2.0"
#      - LibSourcey_VERSION_MAJOR        : Major version part of LibSourcey_VERSION. Example: "1"
#      - LibSourcey_VERSION_MINOR        : Minor version part of LibSourcey_VERSION. Example: "2"
#      - LibSourcey_VERSION_PATCH        : Patch version part of LibSourcey_VERSION. Example: "0"
#
# =================================================================================================

# ======================================================
# Version Compute Capability from which library LibSourcey
# has been compiled is remembered
# ======================================================
SET(LibSourcey_COMPUTE_CAPABILITIES @LibSourcey_CUDA_CC@)

# Extract the directory where *this* file has been installed (determined at cmake run-time)
#  This variable may or may not be used below, depending on the parsing of LibSourceyConfig.cmake
get_filename_component(THIS_LibSourcey_CONFIG_PATH "${CMAKE_CURRENT_LIST_FILE}" PATH)

# ======================================================
# Include directories to add to the user project:
# ======================================================

# Provide the include directories to the caller
SET(LibSourcey_INCLUDE_DIRS @CMAKE_INCLUDE_DIRS_CONFIGCMAKE@)

INCLUDE_DIRECTORIES(${LibSourcey_INCLUDE_DIRS})

# ======================================================
# Link directories to add to the user project:
# ======================================================

# Provide the libs directory anyway, it may be needed in some cases.
SET(LibSourcey_LIB_DIR @CMAKE_LIB_DIRS_CONFIGCMAKE@)

LINK_DIRECTORIES(${LibSourcey_LIB_DIR})

# ====================================================================
# Link libraries: e.g.   LibSourcey_core220.so, LibSourcey_imgproc220d.lib, etc...
# ====================================================================
if(NOT ANDROID)
    set(LibSourcey_LIB_COMPONENTS LibSourcey_core LibSourcey_imgproc LibSourcey_features2d LibSourcey_gpu LibSourcey_calib3d LibSourcey_objdetect LibSourcey_video LibSourcey_highgui LibSourcey_ml LibSourcey_legacy LibSourcey_contrib LibSourcey_flann)
else()
    #libraries order is very important because linker from Android NDK is one-pass linker
    set(LibSourcey_LIB_COMPONENTS LibSourcey_contrib LibSourcey_calib3d LibSourcey_objdetect LibSourcey_features2d LibSourcey_imgproc LibSourcey_video  LibSourcey_highgui LibSourcey_ml LibSourcey_legacy  LibSourcey_flann LibSourcey_core )
    IF (NOT @BUILD_SHARED_LIBS@)
        set(LibSourcey_LIB_COMPONENTS ${LibSourcey_LIB_COMPONENTS} LibSourcey_androidcamera)
    ENDIF()
endif()

SET(LibSourcey_LIBS "")
foreach(__CVLIB ${LibSourcey_LIB_COMPONENTS})
    # CMake>=2.6 supports the notation "debug XXd optimized XX"
    if (CMAKE_MAJOR_VERSION GREATER 2  OR  CMAKE_MINOR_VERSION GREATER 4)
        # Modern CMake:
        SET(LibSourcey_LIBS ${LibSourcey_LIBS} debug ${__CVLIB}@LibSourcey_DLLVERSION@@LibSourcey_DEBUG_POSTFIX@ optimized ${__CVLIB}@LibSourcey_DLLVERSION@)
    else(CMAKE_MAJOR_VERSION GREATER 2  OR  CMAKE_MINOR_VERSION GREATER 4)
        # Old CMake:
        SET(LibSourcey_LIBS ${LibSourcey_LIBS} ${__CVLIB}@LibSourcey_DLLVERSION@)
    endif(CMAKE_MAJOR_VERSION GREATER 2  OR  CMAKE_MINOR_VERSION GREATER 4)
endforeach(__CVLIB)

# ==============================================================
#  Extra include directories, needed by LibSourcey 2 new structure
# ==============================================================
if(NOT @CMAKE_BASE_INCLUDE_DIRS_CONFIGCMAKE@ STREQUAL  "")
    SET(BASEDIR @CMAKE_BASE_INCLUDE_DIRS_CONFIGCMAKE@)
    foreach(__CVLIB ${LibSourcey_LIB_COMPONENTS})
        # We only need the "core",... part here: "LibSourcey_core" -> "core"
        STRING(REGEX REPLACE "LibSourcey_(.*)" "\\1" MODNAME ${__CVLIB})
        INCLUDE_DIRECTORIES("${BASEDIR}/modules/${MODNAME}/include")
    endforeach(__CVLIB)
endif(NOT @CMAKE_BASE_INCLUDE_DIRS_CONFIGCMAKE@ STREQUAL  "")

# For LibSourcey built as static libs, we need the user to link against
#  many more dependencies:
set(LibSourcey_SHARED @BUILD_SHARED_LIBS@)

IF (NOT LibSourcey_SHARED)
    # Under static libs, the user of LibSourcey needs access to the 3rdparty libs as well:
    if(WIN32 AND NOT ANDROID)
        LINK_DIRECTORIES(@CMAKE_BASE_INCLUDE_DIRS_CONFIGCMAKE@/3rdparty/lib)
    else()
        LINK_DIRECTORIES("${THIS_LibSourcey_CONFIG_PATH}/3rdparty/lib")
    endif()    

    set(LibSourcey_LIBS @LibSourcey_LINKER_LIBS@ @IPP_LIBS@ @HIGHGUI_LIBRARIES@ ${LibSourcey_LIBS})

    set(LibSourcey_EXTRA_COMPONENTS @JPEG_LIBRARIES@ @PNG_LIBRARIES@ @TIFF_LIBRARIES@ @JASPER_LIBRARIES@ zlib)

    if (CMAKE_MAJOR_VERSION GREATER 2  OR  CMAKE_MINOR_VERSION GREATER 4)
        foreach(__EXTRA_LIB ${LibSourcey_EXTRA_COMPONENTS})
            set(LibSourcey_LIBS ${LibSourcey_LIBS}
                debug ${__EXTRA_LIB}@LibSourcey_DEBUG_POSTFIX@
                optimized ${__EXTRA_LIB})
        endforeach(__EXTRA_LIB)
    else(CMAKE_MAJOR_VERSION GREATER 2  OR  CMAKE_MINOR_VERSION GREATER 4)
        set(LibSourcey_LIBS ${LibSourcey_LIBS} ${LibSourcey_EXTRA_COMPONENTS})
    endif(CMAKE_MAJOR_VERSION GREATER 2  OR  CMAKE_MINOR_VERSION GREATER 4)

ENDIF()

# ======================================================
#  Android camera helper macro
# ======================================================
IF (ANDROID)
  macro( COPY_NATIVE_CAMERA_LIBS target )
    IF( ARMEABI_V7A)
      get_target_property(target_location ${target} LOCATION)
      get_filename_component(target_location "${target_location}" PATH)
      file(GLOB camera_wrappers "${LibSourcey_LIB_DIR}/libnative_camera_r*.so")
      foreach(wrapper ${camera_wrappers})
          ADD_CUSTOM_COMMAND(
            TARGET ${target}
            POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E copy "${wrapper}" "${target_location}"
            )
      endforeach()
    ENDIF( ARMEABI_V7A )
  endmacro()
ENDIF(ANDROID)

# ======================================================
#  Version variables:
# ======================================================
SET(LibSourcey_VERSION @LibSourcey_VERSION@)
SET(LibSourcey_VERSION_MAJOR  @LibSourcey_VERSION_MAJOR@)
SET(LibSourcey_VERSION_MINOR  @LibSourcey_VERSION_MINOR@)
SET(LibSourcey_VERSION_PATCH  @LibSourcey_VERSION_PATCH@)
